/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/mouse.h>

#define DEFAULT    0
#define PLAYHEAD   1
#define MOUSE      2
#define NAV        3
#define ADJUST     4


#define TIMEOUT 300

&nice_view_spi {
    cs-gpios = <&gpio1 2 GPIO_ACTIVE_HIGH>;
};

&encoder_1 {
    status = "okay";
    steps = <80>;
};

&encoder_2 {
    status = "okay";
    steps = <80>; 
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent=<1>;
    delay-ms = <0>; 
};

&mwh {
    acceleration-exponent=<0>;
    time-to-max-speed-ms = <1>;
    delay-ms = <0>; 
};

#define U_MOUSE_MOVE_MAX 3250
#define U_MOUSE_SCROLL_MAX 50

#undef MOVE_UP
#undef MOVE_DOWN
#undef MOVE_LEFT
#undef MOVE_RIGHT
#define MOVE_UP MOVE_VERT(-U_MOUSE_MOVE_MAX)
#define MOVE_DOWN MOVE_VERT(U_MOUSE_MOVE_MAX)
#define MOVE_LEFT MOVE_HOR(-U_MOUSE_MOVE_MAX)
#define MOVE_RIGHT MOVE_HOR(U_MOUSE_MOVE_MAX)

#undef SCROLL_UP
#undef SCROLL_DOWN
#undef SCROLL_LEFT
#undef SCROLL_RIGHT
#define SCROLL_UP SCROLL_VERT(U_MOUSE_SCROLL_MAX)
#define SCROLL_DOWN SCROLL_VERT(-U_MOUSE_SCROLL_MAX)
#define SCROLL_LEFT SCROLL_HOR(-U_MOUSE_SCROLL_MAX)
#define SCROLL_RIGHT SCROLL_HOR(U_MOUSE_SCROLL_MAX)

/ {
    sensors {
        compatible = "zmk,keymap-sensors";
        sensors = <&encoder_1 &encoder_2>;
        triggers-per-rotation = <20>;
    };
    behaviors {
        rot_mwh: behavior_sensor_rotate_kp {
            compatible = "zmk,behavior-sensor-rotate-var";
            label = "ENC_MWH";
            #sensor-binding-cells = <2>;
            bindings = <&mwh>, <&mwh>;
        };
        th: taphold {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP HOLD";
            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <120>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        smart_gresc: smart_gresc {
            compatible = "zmk,behavior-mod-morph";
            label = "smart_gresc";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&sub_gresc>;
            mods = <(MOD_LGUI|MOD_LSFT)>;
            keep-mods = <(MOD_LGUI|MOD_LSFT)>;
        };
        sub_gresc: sub_gresc {
            compatible = "zmk,behavior-mod-morph";
            label = "sub_gresc";
            #binding-cells = <0>;
            bindings = <&kp GRAVE>, <&kp ESC>;
            mods = <(MOD_LALT|MOD_LCTL)>;
            keep-mods = <(MOD_LALT|MOD_LCTL)>;
        };
        slt: spacebar_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "SPACE_LAYER_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&mo>, <&kp>;
        };
        tnpt: tab_numpad_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "TAB_NUMPAD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <135>;
            global-quick-tap;
            bindings = <&mo>, <&kp>;
        };
    };
    macros {
        hpr: hyper {
            label = "hyper";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings
                = <&macro_press &kp LSHFT &kp LCTRL &kp LALT &kp LGUI>
                , <&macro_pause_for_release>
                , <&macro_release &kp LSHFT &kp LCTRL &kp LALT &kp LGUI>
                ;
        };
        pwr: powerclaw {
            label = "powerclaw";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings
                = <&macro_press &kp LCTRL &kp LALT &kp LGUI>
                , <&macro_pause_for_release>
                , <&macro_release &kp LCTRL &kp LALT &kp LGUI>
                ;
        };
        meh: meh {
            label = "meh";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings
                = <&macro_press &kp LSHFT &kp LCTRL &kp LALT &kp LGUI>
                , <&macro_pause_for_release>
                , <&macro_release &kp LSHFT &kp LCTRL &kp LALT &kp LGUI>
                ;
        };
        dbg: vscode_debug {
            label = "vscode_debug";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings
                = <&macro_tap &kp F5>
                ;
        };
        rdbg: restart_debug {
            label = "restart_debug";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings
                = <&macro_press &kp LSHFT &kp LGUI>
                , <&macro_tap &kp F5>
                , <&macro_release &kp LSHFT &kp LGUI>
                ;
        };
        sdbg: stop_debug {
            label = "stop_debug";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings
                = <&macro_press &kp LSHFT>
                , <&macro_tap &kp F5>
                , <&macro_release &kp LSHFT>
                ;
        };
        vsterm: vscode_terminal {
            label = "vscode_terminal";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp GRAVE>
                , <&macro_release &kp LCTRL>
                ;
        };
        sentr: shift_enter {
            label = "shift_enter";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings
                = <&macro_press &kp LSHFT>
                , <&macro_tap &kp ENTER>
                , <&macro_release &kp LSHFT>
                ;
        };
    };
    combos {
        compatible = "zmk,combos";
        combo_btclr {
            timeout-ms = <TIMEOUT>;
            key-positions = <1 6>;
            bindings = <&bt BT_CLR>;
        };
        combo_reset {
            timeout-ms = <TIMEOUT>;
            key-positions = <1 3>;
            bindings = <&sys_reset>;
        };
        combo_bootloader {
            timeout-ms = <TIMEOUT>;
            key-positions = <1 2>;
            bindings = <&bootloader>;
        };
        /* combo_bt_nxt {
            timeout-ms = <TIMEOUT>;
            key-positions = <1 4>;
            bindings = <&bt BT_NXT>;
        }; */
        /* combo_rgb_tog {
            timeout-ms = <TIMEOUT>;
            key-positions = <1 4>;
            bindings = <&rgb_ug RGB_TOG>;
        }; */
        /* combo_extpr_off {
            timeout-ms = <TIMEOUT>;
            key-positions = <1 4>;
            bindings = <&ext_power EP_OFF>;
        }; */
        combo_adj_layer {
            timeout-ms = <TIMEOUT>;
            key-positions = <1 4>;
            bindings = <&to ADJUST>;
        };
    };

    keymap0: keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "macros";
            bindings = <
                &bt BT_CLR       &to DEFAULT  &to MOUSE       &to NAV           &to PLAYHEAD

                &rgb_ug RGB_TOG  &kp TAB      &meh            &pwr              &hpr
                &rgb_ug RGB_EFF  &smart_gresc &mt LSHFT LBKT  &mt RSHFT RBKT    &kp LGUI
                &tog PLAYHEAD    &sdbg        &dbg            &rdbg             &kp LALT
                &mo MOUSE        &kp Z        &kp M           &kp S             &kp LCTRL
                &slt NAV SPACE   &kp R        &kp C           &kp EQUAL         &sentr
            >;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        playhead_layer {
            label = "playhead";
            bindings = <
                &trans      &trans     &trans        &trans          &trans

                &trans      &trans     &trans        &trans          &trans
                &trans      &trans     &trans        &trans          &trans
                &trans      &trans     &trans        &trans          &trans
                &trans      &trans     &trans        &trans          &trans
                &trans      &trans     &trans        &trans          &trans
            >;
            sensor-bindings = <&inc_dec_kp COMMA DOT &inc_dec_kp PG_UP PG_DN>;
        };

        mouse_layer {
            label = "mouse";
            bindings = <
                &trans         &trans         &trans            &trans          &trans

                &trans         &trans         &trans            &trans             &trans
                &trans         &trans         &mmv MOVE_UP      &trans             &trans
                &trans         &mmv MOVE_LEFT &mmv MOVE_DOWN    &mmv MOVE_RIGHT    &trans
                &trans         &trans         &trans            &trans             &trans
                &trans         &mkp LCLK      &mkp RCLK         &trans             &trans
            >;
            sensor-bindings = <&rot_mwh SCROLL_UP SCROLL_DOWN>;
        };

        nav_layer {
            label = "nav";
            bindings = <
                &trans      &trans     &trans        &trans          &trans
                
                &trans      &trans     &trans        &trans          &trans
                &trans      &trans     &kp UP        &trans          &trans
                &trans      &kp LEFT   &kp DOWN      &kp RIGHT       &trans
                &trans      &trans     &trans        &trans          &trans
                &trans      &trans     &trans        &trans          &trans
            >;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        adjust_layer {
            label = "adjust";
            bindings = <
                &trans      &bt BT_SEL 0     &bt BT_SEL 1      &bt BT_SEL 2 &bt BT_SEL 3
                
                &trans      &rgb_ug RGB_ON   &rgb_ug RGB_OFF   &rgb_ug RGB_EFF &rgb_ug RGB_EFR
                &trans      &rgb_ug RGB_HUI  &rgb_ug RGB_HUD   &rgb_ug RGB_SAI &rgb_ug RGB_SAD
                &trans      &rgb_ug RGB_BRI  &rgb_ug RGB_BRD   &rgb_ug RGB_SPI &rgb_ug RGB_SPD
                &trans      &trans          &trans             &trans          &trans
                &trans      &ext_power EP_ON &ext_power EP_OFF &trans          &trans
            >;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };
    };
};